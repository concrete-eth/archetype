/* Autogenerated file. Do not edit manually. */

package {{$.Package}}

import (
    "reflect"

	"github.com/concrete-eth/archetype/arch"

	{{ range $import := $.Imports }}
	{{- if $import.Name }}{{$import.Name}} "{{$import.Path}}"
    {{- else }}"{{$import.Path}}"{{ end }}
	{{ end }}
)

var ActionsABIJson = contract.ContractABI

var ActionSchemasJson = `{{$.Json}}`

var ActionSchemas arch.ActionSchemas

func init() {
    types := map[string]reflect.Type{
        {{- range $schema := $.Schemas }}
        "{{$schema.Name}}": reflect.TypeOf({{ GoActionStructNameFn $schema.Name }}{}),
        {{- end }}
    }
    var err error
	if ActionSchemas, err = arch.NewActionSchemasFromRaw(ActionsABIJson, ActionSchemasJson, types); err != nil {
		panic(err)
	}
}

type IActions interface {
    {{- range $schema := $.Schemas }}
    {{ GoActionMethodNameFn $schema.Name }}(action *{{ GoActionStructNameFn $schema.Name }}) error
    {{- end }}
    {{ GoActionMethodNameFn $.ArchParams.TickActionName }}()
    {{ GoActionMethodNameFn $.ArchParams.PurgeActionName }}()
}
