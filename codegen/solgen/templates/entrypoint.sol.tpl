// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */
{{ range .Imports }}
import "{{ . }}";
{{- end }}

abstract contract {{.Name}} is {{ range $i, $v := .Interfaces }}{{ if $i }}, {{ end }}{{ $v }}{{ end }} {
    function _executeMultipleActions(
        uint8[] memory actionIds,
        uint8[] memory actionNumber,
        bytes[] memory actionData
    ) external {
        uint256 actionIdx = 0;
        for (uint256 i = 0; i < actionIds.length; i++) {
            uint256 numActions = uint256(actionNumber[i]);
            for (uint256 j = actionIdx; j < actionIdx + numActions; j++) {
                _executeAction(actionIds[i], actionData[j]);
            }
            actionIdx += numActions;
        }
    }

    function _executeAction(uint8 actionId, bytes memory actionData) internal {
        {{- range $index, $element := .Schemas }}
        if (actionId == {{ $index }}) {
            ActionData_{{.Name}} memory action = abi.decode(
                actionData,
                (ActionData_{{.Name}})
            );
            {{_lowerFirstChar .Name}}(action);
        } else {{- end }} {
            revert("Entrypoint: Invalid action ID");
        }
    }

    {{- range .Schemas }}
    {{ if .Values }}
    function {{_lowerFirstChar .Name}}(ActionData_{{.Name}} memory action) public virtual;
    {{- else }}
    function {{_lowerFirstChar .Name}}() public;
    {{- end }}
    {{- end }}
}
