/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	CounterDefaultKey = crypto.Keccak256([]byte("datamod.v1.Counter"))
// )

func CounterDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.Counter"))
}

type CounterRow struct {
	lib.DatastoreStruct
}

func NewCounterRow(dsSlot lib.DatastoreSlot) *CounterRow {
	sizes := []int{2}
	return &CounterRow{*lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *CounterRow) Get() (
	value int16,
) {
	return codec.DecodeInt16(2, v.GetField(0))
}

func (v *CounterRow) Set(
	value int16,
) {
	v.SetField(0, codec.EncodeInt16(2, value))
}

func (v *CounterRow) GetValue() int16 {
	data := v.GetField(0)
	return codec.DecodeInt16(2, data)
}

func (v *CounterRow) SetValue(value int16) {
	data := codec.EncodeInt16(2, value)
	v.SetField(0, data)
}

type Counter struct {
	dsSlot lib.DatastoreSlot
}

func NewCounter(ds lib.Datastore) *Counter {
	dsSlot := ds.Get(CounterDefaultKey())
	return &Counter{dsSlot}
}

func NewCounterFromSlot(dsSlot lib.DatastoreSlot) *Counter {
	return &Counter{dsSlot}
}
func (m *Counter) Get() *CounterRow {
	return NewCounterRow(m.dsSlot)
}
