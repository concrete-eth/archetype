/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = crypto.Keccak256
	_ = big.NewInt
	_ = common.Big1
	_ = codec.EncodeAddress
)

// var (
//	ConfigDefaultKey = crypto.Keccak256([]byte("datamod.v1.Config"))
// )

func ConfigDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.Config"))
}

type ConfigRow struct {
	lib.IDatastoreStruct
}

func NewConfigRow(dsSlot lib.DatastoreSlot) *ConfigRow {
	sizes := []int{8, 1}
	return &ConfigRow{lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *ConfigRow) Get() (
	startBlock uint64,
	maxPlayers uint8,
) {
	return codec.DecodeSmallUint64(8, v.GetField(0)),
		codec.DecodeSmallUint8(1, v.GetField(1))
}

func (v *ConfigRow) Set(
	startBlock uint64,
	maxPlayers uint8,
) {
	v.SetField(0, codec.EncodeSmallUint64(8, startBlock))
	v.SetField(1, codec.EncodeSmallUint8(1, maxPlayers))
}

func (v *ConfigRow) GetStartBlock() uint64 {
	data := v.GetField(0)
	return codec.DecodeSmallUint64(8, data)
}

func (v *ConfigRow) SetStartBlock(value uint64) {
	data := codec.EncodeSmallUint64(8, value)
	v.SetField(0, data)
}

func (v *ConfigRow) GetMaxPlayers() uint8 {
	data := v.GetField(1)
	return codec.DecodeSmallUint8(1, data)
}

func (v *ConfigRow) SetMaxPlayers(value uint8) {
	data := codec.EncodeSmallUint8(1, value)
	v.SetField(1, data)
}

type Config struct {
	dsSlot lib.DatastoreSlot
}

func NewConfig(ds lib.Datastore) *Config {
	dsSlot := ds.Get(ConfigDefaultKey())
	return &Config{dsSlot}
}

func NewConfigFromSlot(dsSlot lib.DatastoreSlot) *Config {
	return &Config{dsSlot}
}
func (m *Config) Get() *ConfigRow {
	return NewConfigRow(m.dsSlot)
}