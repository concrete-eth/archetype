/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = crypto.Keccak256
	_ = big.NewInt
	_ = common.Big1
	_ = codec.EncodeAddress
)

func NewPlayersRowWithHooks(row *PlayersRow) *PlayersRow {
	return &PlayersRow{lib.NewDatastoreStructWithHooks(row.IDatastoreStruct)}
}

type PlayersWithHooks struct {
	Players
	OnSetRow func(rowKey []interface{}, column int, value []byte)
}

func NewPlayersWithHooks(table *Players) *PlayersWithHooks {
	return &PlayersWithHooks{
		Players: *table,
	}
}

func (m *PlayersWithHooks) Get(
	playerId uint8,
) *PlayersRow {
	row := m.Players.Get(
		playerId,
	)
	row = NewPlayersRowWithHooks(row)
	row.IDatastoreStruct.(*lib.DatastoreStructWithHooks).OnSetField = func(column int, value []byte) {
		if m.OnSetRow != nil {
			m.OnSetRow([]interface{}{
					playerId,
			}, column, value)
		}
	}
	return row
}
