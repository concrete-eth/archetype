/* Autogenerated file. Do not edit manually. */

package model

import (
	"fmt"
	"reflect"

	"github.com/ethereum/go-ethereum/common"
)

var (
	_ = common.Big1
)

const (
	ActionId_Tick uint8 = iota
	ActionId_Move
)

var Actions = map[uint8]struct {
	Id         uint8
	Name       string
	MethodName string
}{
	ActionId_Tick: {
		Id:         ActionId_Tick,
		Name:       "Tick",
		MethodName: "tick",
	},
	ActionId_Move: {
		Id:         ActionId_Move,
		Name:       "Move",
		MethodName: "move",
	},
}

var ActionIdsByMethodName = map[string]uint8{
	"tick": ActionId_Tick,
	"move": ActionId_Move,
}

type ActionData_Tick struct {
}

type ActionData_Move struct {
	PlayerId  uint8 `json:"playerId"`
	Direction uint8 `json:"direction"`
}

func (action *ActionData_Move) GetPlayerId() uint8 {
	return action.PlayerId
}

func (action *ActionData_Move) GetDirection() uint8 {
	return action.Direction
}

func ActionIdFromAction(action interface{}) (uint8, bool) {
	switch action.(type) {
	case *ActionData_Tick:
		return ActionId_Tick, true
	case *ActionData_Move:
		return ActionId_Move, true
	default:
		return 0, false
	}
}

// Sets all the fields of the destination struct that are present in the source struct.
// Both structs need not be of the same type.
func ConvertStruct(src interface{}, dest interface{}) error {
	srcVal := reflect.ValueOf(src)
	if srcVal.Kind() != reflect.Struct {
		return fmt.Errorf("src is not a struct")
	}

	destVal := reflect.ValueOf(dest)
	if destVal.Kind() != reflect.Ptr || destVal.Elem().Kind() != reflect.Struct {
		return fmt.Errorf("dest is not a pointer to a struct")
	}

	destElem := destVal.Elem()

	for i := 0; i < srcVal.NumField(); i++ {
		srcField := srcVal.Field(i)
		destField := destElem.FieldByName(srcVal.Type().Field(i).Name)

		if destField.IsValid() && destField.CanSet() && srcField.Type() == destField.Type() {
			destField.Set(srcField)
		}
	}

	return nil
}

func AnonToCanon(actionId uint8, action interface{}) (interface{}, error) {
	var canon interface{}
	switch actionId {
	case ActionId_Tick:
		canon = &ActionData_Tick{}
	case ActionId_Move:
		canon = &ActionData_Move{}
	default:
		return nil, fmt.Errorf("unknown action type %T", action)
	}
	err := ConvertStruct(action, canon)
	if err != nil {
		return nil, err
	}
	return canon, nil
}
