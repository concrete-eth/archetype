/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = crypto.Keccak256
	_ = big.NewInt
	_ = common.Big1
	_ = codec.EncodeAddress
)

// var (
//	PlayersDefaultKey = crypto.Keccak256([]byte("datamod.v1.Players"))
// )

func PlayersDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.Players"))
}

type PlayersRow struct {
	lib.IDatastoreStruct
}

func NewPlayersRow(dsSlot lib.DatastoreSlot) *PlayersRow {
	sizes := []int{2, 2}
	return &PlayersRow{lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *PlayersRow) Get() (
	x int16,
	y int16,
) {
	return codec.DecodeSmallInt16(2, v.GetField(0)),
		codec.DecodeSmallInt16(2, v.GetField(1))
}

func (v *PlayersRow) Set(
	x int16,
	y int16,
) {
	v.SetField(0, codec.EncodeSmallInt16(2, x))
	v.SetField(1, codec.EncodeSmallInt16(2, y))
}

func (v *PlayersRow) GetX() int16 {
	data := v.GetField(0)
	return codec.DecodeSmallInt16(2, data)
}

func (v *PlayersRow) SetX(value int16) {
	data := codec.EncodeSmallInt16(2, value)
	v.SetField(0, data)
}

func (v *PlayersRow) GetY() int16 {
	data := v.GetField(1)
	return codec.DecodeSmallInt16(2, data)
}

func (v *PlayersRow) SetY(value int16) {
	data := codec.EncodeSmallInt16(2, value)
	v.SetField(1, data)
}

type Players struct {
	dsSlot lib.DatastoreSlot
}

func NewPlayers(ds lib.Datastore) *Players {
	dsSlot := ds.Get(PlayersDefaultKey())
	return &Players{dsSlot}
}

func NewPlayersFromSlot(dsSlot lib.DatastoreSlot) *Players {
	return &Players{dsSlot}
}
func (m *Players) Get(
	playerId uint16,
) *PlayersRow {
	dsSlot := m.dsSlot.Mapping().GetNested(
		codec.EncodeSmallUint16(2, playerId),
	)
	return NewPlayersRow(dsSlot)
}
