/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = crypto.Keccak256
	_ = big.NewInt
	_ = common.Big1
	_ = codec.EncodeAddress
)

// var (
//	MetaDefaultKey = crypto.Keccak256([]byte("datamod.v1.Meta"))
// )

func MetaDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.Meta"))
}

type MetaRow struct {
	lib.IDatastoreStruct
}

func NewMetaRow(dsSlot lib.DatastoreSlot) *MetaRow {
	sizes := []int{8, 2, 2}
	return &MetaRow{lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *MetaRow) Get() (
	startBlock uint64,
	maxPlayers uint16,
	playerCount uint16,
) {
	return codec.DecodeSmallUint64(8, v.GetField(0)),
		codec.DecodeSmallUint16(2, v.GetField(1)),
		codec.DecodeSmallUint16(2, v.GetField(2))
}

func (v *MetaRow) Set(
	startBlock uint64,
	maxPlayers uint16,
	playerCount uint16,
) {
	v.SetField(0, codec.EncodeSmallUint64(8, startBlock))
	v.SetField(1, codec.EncodeSmallUint16(2, maxPlayers))
	v.SetField(2, codec.EncodeSmallUint16(2, playerCount))
}

func (v *MetaRow) GetStartBlock() uint64 {
	data := v.GetField(0)
	return codec.DecodeSmallUint64(8, data)
}

func (v *MetaRow) SetStartBlock(value uint64) {
	data := codec.EncodeSmallUint64(8, value)
	v.SetField(0, data)
}

func (v *MetaRow) GetMaxPlayers() uint16 {
	data := v.GetField(1)
	return codec.DecodeSmallUint16(2, data)
}

func (v *MetaRow) SetMaxPlayers(value uint16) {
	data := codec.EncodeSmallUint16(2, value)
	v.SetField(1, data)
}

func (v *MetaRow) GetPlayerCount() uint16 {
	data := v.GetField(2)
	return codec.DecodeSmallUint16(2, data)
}

func (v *MetaRow) SetPlayerCount(value uint16) {
	data := codec.EncodeSmallUint16(2, value)
	v.SetField(2, data)
}

type Meta struct {
	dsSlot lib.DatastoreSlot
}

func NewMeta(ds lib.Datastore) *Meta {
	dsSlot := ds.Get(MetaDefaultKey())
	return &Meta{dsSlot}
}

func NewMetaFromSlot(dsSlot lib.DatastoreSlot) *Meta {
	return &Meta{dsSlot}
}
func (m *Meta) Get() *MetaRow {
	return NewMetaRow(m.dsSlot)
}
