/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = crypto.Keccak256
	_ = big.NewInt
	_ = common.Big1
	_ = codec.EncodeAddress
)

// var (
//	BoardDefaultKey = crypto.Keccak256([]byte("datamod.v1.Board"))
// )

func BoardDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.Board"))
}

type BoardRow struct {
	lib.IDatastoreStruct
}

func NewBoardRow(dsSlot lib.DatastoreSlot) *BoardRow {
	sizes := []int{2}
	return &BoardRow{lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *BoardRow) Get() (
	playerId uint16,
) {
	return codec.DecodeSmallUint16(2, v.GetField(0))
}

func (v *BoardRow) Set(
	playerId uint16,
) {
	v.SetField(0, codec.EncodeSmallUint16(2, playerId))
}

func (v *BoardRow) GetPlayerId() uint16 {
	data := v.GetField(0)
	return codec.DecodeSmallUint16(2, data)
}

func (v *BoardRow) SetPlayerId(value uint16) {
	data := codec.EncodeSmallUint16(2, value)
	v.SetField(0, data)
}

type Board struct {
	dsSlot lib.DatastoreSlot
}

func NewBoard(ds lib.Datastore) *Board {
	dsSlot := ds.Get(BoardDefaultKey())
	return &Board{dsSlot}
}

func NewBoardFromSlot(dsSlot lib.DatastoreSlot) *Board {
	return &Board{dsSlot}
}
func (m *Board) Get(
	x int16,
	y int16,
) *BoardRow {
	dsSlot := m.dsSlot.Mapping().GetNested(
		codec.EncodeSmallInt16(2, x),
		codec.EncodeSmallInt16(2, y),
	)
	return NewBoardRow(dsSlot)
}
