/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = crypto.Keccak256
	_ = big.NewInt
	_ = common.Big1
	_ = codec.EncodeAddress
)

// var (
//	BodiesDefaultKey = crypto.Keccak256([]byte("datamod.v1.Bodies"))
// )

func BodiesDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.Bodies"))
}

type BodiesRow struct {
	lib.IDatastoreStruct
}

func NewBodiesRow(dsSlot lib.DatastoreSlot) *BodiesRow {
	sizes := []int{2, 2, 2, 2, 2}
	return &BodiesRow{lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *BodiesRow) Get() (
	x int16,
	y int16,
	m uint16,
	vx int16,
	vy int16,
) {
	return codec.DecodeSmallInt16(2, v.GetField(0)),
		codec.DecodeSmallInt16(2, v.GetField(1)),
		codec.DecodeSmallUint16(2, v.GetField(2)),
		codec.DecodeSmallInt16(2, v.GetField(3)),
		codec.DecodeSmallInt16(2, v.GetField(4))
}

func (v *BodiesRow) Set(
	x int16,
	y int16,
	m uint16,
	vx int16,
	vy int16,
) {
	v.SetField(0, codec.EncodeSmallInt16(2, x))
	v.SetField(1, codec.EncodeSmallInt16(2, y))
	v.SetField(2, codec.EncodeSmallUint16(2, m))
	v.SetField(3, codec.EncodeSmallInt16(2, vx))
	v.SetField(4, codec.EncodeSmallInt16(2, vy))
}

func (v *BodiesRow) GetX() int16 {
	data := v.GetField(0)
	return codec.DecodeSmallInt16(2, data)
}

func (v *BodiesRow) SetX(value int16) {
	data := codec.EncodeSmallInt16(2, value)
	v.SetField(0, data)
}

func (v *BodiesRow) GetY() int16 {
	data := v.GetField(1)
	return codec.DecodeSmallInt16(2, data)
}

func (v *BodiesRow) SetY(value int16) {
	data := codec.EncodeSmallInt16(2, value)
	v.SetField(1, data)
}

func (v *BodiesRow) GetM() uint16 {
	data := v.GetField(2)
	return codec.DecodeSmallUint16(2, data)
}

func (v *BodiesRow) SetM(value uint16) {
	data := codec.EncodeSmallUint16(2, value)
	v.SetField(2, data)
}

func (v *BodiesRow) GetVx() int16 {
	data := v.GetField(3)
	return codec.DecodeSmallInt16(2, data)
}

func (v *BodiesRow) SetVx(value int16) {
	data := codec.EncodeSmallInt16(2, value)
	v.SetField(3, data)
}

func (v *BodiesRow) GetVy() int16 {
	data := v.GetField(4)
	return codec.DecodeSmallInt16(2, data)
}

func (v *BodiesRow) SetVy(value int16) {
	data := codec.EncodeSmallInt16(2, value)
	v.SetField(4, data)
}

type Bodies struct {
	dsSlot lib.DatastoreSlot
}

func NewBodies(ds lib.Datastore) *Bodies {
	dsSlot := ds.Get(BodiesDefaultKey())
	return &Bodies{dsSlot}
}

func NewBodiesFromSlot(dsSlot lib.DatastoreSlot) *Bodies {
	return &Bodies{dsSlot}
}
func (m *Bodies) Get(
	bodyId uint8,
) *BodiesRow {
	dsSlot := m.dsSlot.Mapping().GetNested(
		codec.EncodeSmallUint8(1, bodyId),
	)
	return NewBodiesRow(dsSlot)
}
