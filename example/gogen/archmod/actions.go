/* Autogenerated file. Do not edit manually. */

package archmod

import (
	"reflect"

	archtypes "github.com/concrete-eth/archetype/types"
	"github.com/ethereum/go-ethereum/common"
)

var (
	_ = common.Big1
)

const (
	ActionId_Move uint8 = iota
)

var Actions = map[uint8]archtypes.ActionMetadata{
	ActionId_Move: {
		Id:         ActionId_Move,
		Name:       "Move",
		MethodName: "move",
		Type:       reflect.TypeOf(ActionData_Move{}),
	},
}

/*
var ActionIdsByMethodName = map[string]uint8{
    "move": ActionId_Move,
}
*/

type ActionData_Move struct {
	PlayerId  uint8 `json:"playerId"`
	Direction uint8 `json:"direction"`
}

func (action *ActionData_Move) GetPlayerId() uint8 {
	return action.PlayerId
}

func (action *ActionData_Move) GetDirection() uint8 {
	return action.Direction
}

func ActionIdFromAction(action interface{}) (uint8, bool) {
	switch action.(type) {
	case *ActionData_Move:
		return ActionId_Move, true
	default:
		return 0, false
	}
}
